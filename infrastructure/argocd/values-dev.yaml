# Development ArgoCD configuration
argo-cd:
  configs:
    params:
      server.insecure: false
    cm:
      url: "https://argocd.dev.aircast.one"
      # OIDC configuration for team access
      oidc.config: |
        name: GitHub
        issuer: https://github.com
        clientId: $argocd-github-oauth:clientId
        clientSecret: $argocd-github-oauth:clientSecret
        requestedScopes: ["user:email", "read:org"]
        requestedIDTokenClaims: {"groups": {"essential": true}}
      # RBAC configuration
      policy.default: role:readonly
      policy.csv: |
        p, role:admin, applications, *, */*, allow
        p, role:admin, clusters, *, *, allow
        p, role:admin, repositories, *, *, allow
        g, aircast:dev-team, role:admin

  server:
    # Production-ready resources
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    
    # Enable metrics
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  controller:
    # High availability for dev
    replicas: 1
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2000m
        memory: 4Gi
    
    # Enable metrics
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  repoServer:
    # High availability for dev
    replicas: 2
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    
    # Enable metrics
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  applicationSet:
    # Enable for app-of-apps pattern
    enabled: true
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi

  # Enable notifications
  notifications:
    enabled: true
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 200m
        memory: 256Mi

  # Use Redis HA for reliability
  redis-ha:
    enabled: true
    persistentVolume:
      size: 10Gi

# Development ingress with Let's Encrypt staging
ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-XSS-Protection: 1; mode=block";
  hosts:
    - host: argocd.dev.aircast.one
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: argocd-dev-tls
      hosts:
        - argocd.dev.aircast.one